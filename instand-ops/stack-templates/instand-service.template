{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Service Stack, contains resources only used by the backend rest service(we need a name for the service)",
  "Parameters": {
    "Subnets": {
      "Type": "CommaDelimitedList"
    },
    "StackPrefix": {
      "Type": "String"
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC::Id"
    },
    "MobileElb": {
      "Type": "String"
    }
  },
  "Resources": {
    "ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Get*",
                    "s3:List*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ServiceInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ServiceRole"
          }
        ]
      }
    },
    "ServiceAsg": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          "us-east-1c",
          "us-east-1b",
          "us-east-1a",
          "us-east-1e"
        ],
        "Cooldown": "300",
        "DesiredCapacity": "1",
        "HealthCheckGracePeriod": "300",
        "HealthCheckType": "EC2",
        "MaxSize": "1",
        "MinSize": "0",
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "LaunchConfigurationName": {
          "Ref": "ServiceLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "MobileElb"
          },
          {
            "Ref": "Elb"
          }
        ],
        "MetricsCollection": [
          {
            "Metrics": [
              "GroupPendingInstances",
              "GroupDesiredCapacity",
              "GroupTotalInstances",
              "GroupInServiceInstances",
              "GroupMinSize",
              "GroupTerminatingInstances",
              "GroupMaxSize"
            ],
            "Granularity": "1Minute"
          }
        ],
        "TerminationPolicies": [
          "Default"
        ]
      }
    },
    "ServiceLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": "ami-0d4cfd66",
        "InstanceType": "t2.micro",
        "KeyName": "instand-ec2-starter",
        "IamInstanceProfile": {
          "Ref": "ServiceInstanceProfile"
        },
        "InstanceMonitoring": "true",
        "SecurityGroups": [
          {
            "Ref": "ElbSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 8
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum -y update\n",
                "yum install -y ruby\n",
                "yum install -y aws-cli\n",
                "cd /home/ec2-user\n",
                "aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1\n",
                "chmod +x ./install\n",
                "./install auto"
              ]
            ]
          }
        }
      }
    },
    "Elb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": {
          "Ref": "Subnets"
        },
        "LoadBalancerName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "StackPrefix"
              },
              "service",
              "elb"
            ]
          ]
        },
        "HealthCheck": {
          "HealthyThreshold": "10",
          "Interval": "15",
          "Target": "HTTP:8080/",
          "Timeout": "5",
          "UnhealthyThreshold": "4"
        },
        "ConnectionDrainingPolicy": {
          "Enabled": "true",
          "Timeout": "300"
        },
        "ConnectionSettings": {
          "IdleTimeout": "60"
        },
        "CrossZone": "true",
        "SecurityGroups": [
          {
            "Ref": "ElbSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "8080",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ]
      }
    },
    "Interpretation": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "interpretingSubjectId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "interpretingSubjectId-index",
            "KeySchema": [
              {
                "AttributeName": "interpretingSubjectId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "1",
              "WriteCapacityUnits": "1"
            }
          }
        ],
        "TableName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "StackPrefix"
              },
              "interpretation"
            ]
          ]
        }
      }
    },
    "Subject": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        },
        "TableName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "StackPrefix"
              },
              "subject"
            ]
          ]
        }
      }
    },
    "User": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "emailAddress",
            "AttributeType": "S"
          },
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "username",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "username-index",
            "KeySchema": [
              {
                "AttributeName": "username",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "1",
              "WriteCapacityUnits": "1"
            }
          },
          {
            "IndexName": "emailAddress-index",
            "KeySchema": [
              {
                "AttributeName": "emailAddress",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "1",
              "WriteCapacityUnits": "1"
            }
          }
        ],
        "TableName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "StackPrefix"
              },
              "user"
            ]
          ]
        }
      }
    },
    "ElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "AutoScaling-Security-Group-1",
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "ElbSecurityGroupIngress1": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ElbSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ElbSecurityGroupIngress2": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ElbSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "8080",
        "ToPort": "8080",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ElbSecurityGroupIngress3": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ElbSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ElbSecurityGroupIngress4": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ElbSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "8100",
        "ToPort": "8100",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ElbSecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "ElbSecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.us-east-1.amazonaws.com",
                  "codedeploy.ap-northeast-1.amazonaws.com",
                  "codedeploy.eu-west-1.amazonaws.com",
                  "codedeploy.us-west-2.amazonaws.com",
                  "codedeploy.ap-southeast-2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AWSCodeDeployRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "autoscaling:DeleteLifecycleHook",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeLifecycleHooks",
                    "autoscaling:PutLifecycleHook",
                    "autoscaling:RecordLifecycleActionHeartbeat",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceStatus",
                    "tag:GetTags",
                    "tag:GetResources"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "AmazonS3ReadOnlyAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Get*",
                    "s3:List*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CircleCi": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "CircleCiUserKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "CircleCiUser" }
      }
    },
    "CircleCiUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "ManagedPolicyArns": [

        ],
        "Policies": [
          {
            "PolicyName" : "circleci-s3",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:s3::",
                          {
                            "Fn::Join" : [
                              "/",
                              [
                                { "Ref" : "CircleCi" },
                                "*"
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName" : "circleci-codedeploy",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codedeploy:RegisterApplicationRevision",
                    "codedeploy:GetApplicationRevision"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:codedeploy",
                          { "Ref" : "AWS::Region" },
                          { "Ref" : "AWS::AccountId" },
                          "application",
                          { "Ref" : "InstandApplication" }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codedeploy:CreateDeployment",
                    "codedeploy:GetDeployment"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:codedeploy",
                          { "Ref" : "AWS::Region" },
                          { "Ref" : "AWS::AccountId" },
                          "deploymentgroup",
                          {
                            "Fn::Join" : [
                              "/",
                              [
                                { "Ref" : "InstandApplication" },
                                { "Ref" : "DeploymentGroup" }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codedeploy:GetDeploymentConfig"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn:aws:codedeploy",
                          { "Ref" : "AWS::Region" },
                          { "Ref" : "AWS::AccountId" },
                          "deploymentconfig",
                          { "Ref" : "ThirtyThreePercentAtATime" }
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "InstandApplication": {
      "Type": "AWS::CodeDeploy::Application"
    },
    "ThirtyThreePercentAtATime": {
      "Type": "AWS::CodeDeploy::DeploymentConfig",
      "Properties": {
        "MinimumHealthyHosts": {
          "Type": "FLEET_PERCENT",
          "Value": "33"
        }
      }
    },
    "DeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "InstandApplication"
        },
        "AutoScalingGroups": [
          {
            "Ref": "ServiceAsg"
          }
        ],
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },
    "DynamodbSnsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "dynamodb"
      }
    },
    "DynamodbSnsTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "Topics": [
          {
            "Ref": "DynamodbSnsTopic"
          }
        ],
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Id": "__default_policy_ID",
          "Statement": [
            {
              "Sid": "__default_statement_ID",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "SNS:Subscribe",
                "SNS:ListSubscriptionsByTopic",
                "SNS:DeleteTopic",
                "SNS:GetTopicAttributes",
                "SNS:Publish",
                "SNS:RemovePermission",
                "SNS:AddPermission",
                "SNS:Receive",
                "SNS:SetTopicAttributes"
              ],
              "Resource": {
                "Ref": "DynamodbSnsTopic"
              },
              "Condition": {
                "StringEquals": {
                  "AWS:SourceOwner": "834496413146"
                }
              }
            }
          ]
        }
      }
    },
    "InstanceOverusedAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "AlarmDescription": "Instances' cpu usage has breached 80% threshold",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "3",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "300",
        "Statistic": "Average",
        "Threshold": "80.0",
        "AlarmActions": [
          "arn:aws:sns:us-east-1:834496413146:emails"
        ]
      }
    },
    "AlertSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "INST-ALRT",
        "Subscription": [
          {
            "Endpoint": "instand.inc@gmail.com",
            "Protocol": "email"
          }
        ]
      }
    },
    "AlertSnsTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "Topics": [
          {
            "Ref": "AlertSNSTopic"
          }
        ],
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Id": "__default_policy_ID",
          "Statement": [
            {
              "Sid": "__default_statement_ID",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "SNS:Subscribe",
                "SNS:ListSubscriptionsByTopic",
                "SNS:DeleteTopic",
                "SNS:GetTopicAttributes",
                "SNS:Publish",
                "SNS:RemovePermission",
                "SNS:AddPermission",
                "SNS:Receive",
                "SNS:SetTopicAttributes"
              ],
              "Resource": {
                "Ref": "AlertSNSTopic"
              },
              "Condition": {
                "StringEquals": {
                  "AWS:SourceOwner": "834496413146"
                }
              }
            }
          ]
        }
      }
    },
    "SubjectReadCapacityLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "12",
        "MetricName": "ConsumedReadCapacityUnits",
        "Namespace": "AWS/DynamoDB",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "240.0",
        "AlarmActions": [
          "arn:aws:sns:us-east-1:834496413146:dynamodb"
        ],
        "Dimensions": [
          {
            "Name": "TableName",
            "Value": "na-alpha-subject"
          }
        ]
      }
    },
    "SubjectWriteCapacityLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "12",
        "MetricName": "ConsumedWriteCapacityUnits",
        "Namespace": "AWS/DynamoDB",
        "Period": "300",
        "Statistic": "Sum",
        "Threshold": "240.0",
        "AlarmActions": [
          "arn:aws:sns:us-east-1:834496413146:dynamodb"
        ],
        "Dimensions": [
          {
            "Name": "TableName",
            "Value": "na-alpha-subject"
          }
        ]
      }
    },
    "UserReadCapacityLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "12",
        "MetricName": "ConsumedReadCapacityUnits",
        "Namespace": "AWS/DynamoDB",
        "Period": "60",
        "Statistic": "Sum",
        "Threshold": "48.0",
        "AlarmActions": [
          "arn:aws:sns:us-east-1:834496413146:dynamodb"
        ],
        "Dimensions": [
          {
            "Name": "TableName",
            "Value": "na-alpha-user"
          }
        ]
      }
    },
    "UserWriteCapacityLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "12",
        "MetricName": "ConsumedWriteCapacityUnits",
        "Namespace": "AWS/DynamoDB",
        "Period": "60",
        "Statistic": "Sum",
        "Threshold": "48.0",
        "AlarmActions": [
          "arn:aws:sns:us-east-1:834496413146:dynamodb"
        ],
        "Dimensions": [
          {
            "Name": "TableName",
            "Value": "na-alpha-user"
          }
        ]
      }
    },
    "EmailAddressIndexReadCapacityLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "12",
        "MetricName": "ConsumedReadCapacityUnits",
        "Namespace": "AWS/DynamoDB",
        "Period": "60",
        "Statistic": "Sum",
        "Threshold": "48.0",
        "AlarmActions": [
          "arn:aws:sns:us-east-1:834496413146:dynamodb"
        ],
        "Dimensions": [
          {
            "Name": "TableName",
            "Value": "na-alpha-user"
          },
          {
            "Name": "GlobalSecondaryIndexName",
            "Value": "emailAddress-index"
          }
        ]
      }
    },
    "EmailAddressIndexWriteCapacityLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods": "12",
        "MetricName": "ConsumedWriteCapacityUnits",
        "Namespace": "AWS/DynamoDB",
        "Period": "60",
        "Statistic": "Sum",
        "Threshold": "48.0",
        "AlarmActions": [
          "arn:aws:sns:us-east-1:834496413146:dynamodb"
        ],
        "Dimensions": [
          {
            "Name": "TableName",
            "Value": "na-alpha-user"
          },
          {
            "Name": "GlobalSecondaryIndexName",
            "Value": "emailAddress-index"
          }
        ]
      }
    }
  },
  "Outputs": {
    "Elb": {
      "Value": {
        "Ref": "Elb"
      }
    },
    "CircleCiUserKeys": {
      "Value": {
        "Fn::Join": [
          ":",
          [
            { "Ref" : "CircleCiUserKeys" },
            { "Fn::GetAtt" : [ "CircleCiUserKeys", "SecretAccessKey" ] }
          ]
        ]
      }
    }
  }
}
