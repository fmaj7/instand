package com.instand.common.util;

import com.google.common.io.BaseEncoding;
import lombok.experimental.UtilityClass;

import java.nio.ByteBuffer;
import java.util.UUID;

/**
 * See also http://rentzsch.tumblr.com/post/2070061000/uuid-encoding-usability
 */
@UtilityClass
public final class Guid {

    /**
     * Generates a unique id string with the same uniqueness of UUID, but is shorten than the hex UUID representation by
     * encoding bytes in URL-safe Base 64.
     *
     * @return a unique id encoded in Base 64.
     */
    public static String randomBase64UrlSafe() {
        return encode(BaseEncoding.base64Url());
    }

    /**
     * Generates a unique string with the same uniqueness of UUID, but is shorten than the hex UUID representation by
     * encoding bytes in Base 32. The generated id string is slightly longer than the one generated by
     * {@link #randomBase64UrlSafe} because it uses less base characters.
     *
     * @return a unique id encoded in Base 32.
     */
    public static String randomBase32() {
        return encode(BaseEncoding.base32());
    }

    private static String encode(BaseEncoding encoding) {
        UUID uuid = UUID.randomUUID();
        ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
        bb.putLong(uuid.getMostSignificantBits());
        bb.putLong(uuid.getLeastSignificantBits());
        String s = encoding.encode(bb.array());
        return s.replaceAll("=", "");
    }
}